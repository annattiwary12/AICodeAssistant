import archiver from "archiver";
import { Readable } from "stream";
import { CodeGenerationResponse } from "@shared/schema";

export async function createZipBuffer(codeResponse: CodeGenerationResponse): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const archive = archiver("zip", {
      zlib: { level: 9 }
    });

    const chunks: Buffer[] = [];

    archive.on("data", (chunk) => {
      chunks.push(chunk);
    });

    archive.on("end", () => {
      resolve(Buffer.concat(chunks));
    });

    archive.on("error", (err) => {
      reject(err);
    });

    // Add all files to the archive
    for (const file of codeResponse.files) {
      archive.append(file.content, { name: file.path });
    }

    // Add a README
    const readme = `# ${codeResponse.projectName}

This project was generated by AI Code Assistant.

## Framework: ${codeResponse.framework}

## Getting Started

Please refer to the generated files for implementation details.
`;
    archive.append(readme, { name: "README.md" });

    archive.finalize();
  });
}
